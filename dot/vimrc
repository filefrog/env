"
" ~/.vimrc - Vim Runtime Control file
"
" These are my handy-dandy settings for Vim
"
" author:    James Hunt <jhunt@synacor.com>
" created:   2008-06-27
" updated:   2011-11-10, jrh: port to Synacor; Updated some F2/F3/F9 to be more useful
"

"################################################################################
"#### GLOBAL PARAMETERS #########################################################

" Tabs are 4 columns wide, and use the TAB character
set tabstop=4 softtabstop=4 shiftwidth=4 noexpandtab

" Disable all sorts of bells and visual alerts
set visualbell t_vb=
set novisualbell

" Autoindent, I love you
filetype indent on
set autoindent

" Add 'o' formatoption to continue comment characters during F2/F3
set formatoptions=tcqo

" Turn on search term highlighting
set hlsearch

" Print representations of trailing spaces, tabs and end-of-line
highlight SpecialKey ctermfg=DarkGray
highlight NonText    ctermfg=DarkGray
set listchars=tab:\\-,trail:.,eol:$
set list

" Show line numbers in Dark Gray, and use as little space
" as possible on the left margin for displaying them.
set number
set numberwidth=1
highlight LineNr ctermfg=DarkGray

" Turn on syntax higlighting on a dark background.
" Some update must have turned this off, jrh - 2008-11-28
syntax on
set background=dark
" ... and don't forget gvim
if has('gui_running')
	color slate
endif

" Turn on modeline processing, so we can force certain vim
" parameters when we don't match an autocommand.
set modeline

" Turn on marker foldmethod, to make things easier
set foldmethod=marker

" Turn off stupid cindent rules, until I can figure out
" how to customize them to my coding style.
set nocindent

set laststatus=2
set stl=[%n]\ file:%-50F\ %y%r%m\ byte:0x%B%=line:%l:%c/%L\ %p%%



"################################################################################
"#### MAPPED COMMANDS ###########################################################

""" ###   Custom Vim Environment Header Helpers   ############################
map <F7> :!/bin/sh -c 'clear && grep ^\"\"\" ~/.vimrc \| sed -e s/^...//'<CR>

"""
""" ###   File Creation / Update Header Helpers   ############################
"""
"""   F2 - insert header listing author and creation date.
map <F2> o author:  James Hunt <jhunt@synacor.com><Esc>ocreated: <Esc>:read !date +"\%Y-\%m-\%d"<CR>kJ<Esc>
"""   F3 - insert a header line listing an update
map <F3> oupdated: <Esc>:read !date +"\%Y-\%m-\%d"<CR>kJA, jrh: 
"""   F9 - insert [ jrh, <date> ] at cursor
map <F9> A[ jrh,<esc>:read !date +"\%Y-\%m-\%d"<CR>kJA ]<Esc>o

"""
"""
""" ###   Easy .vimrc Management   ###########################################
"""

"""   ;v - Open .vimrc in a new buffer for editing
map ;v :sp ~/.vimrc<CR>

"""   ;u - Reload .vimrc (in current buffer)
map ;u :source ~/.vimrc<CR>

"""
"""
""" ###   Copy/Paste Support   ###############################################
"""

"""   ;cp - Set for COPY mode (turn off non-printing chars)
map ;cp :set nonumber<CR>:set nolist<CR>

"""   ;pc - Opposite of ;cp - turns on non-printing chars
map ;pc :set number<CR>:set list<CR>

"""
"""
""" ###   Whitespace Management   ############################################
"""

"""   ;n - Collapse successive empty (spaces or tabs allowed) lines
map ;n GoZ<Esc>:g/^[ <Tab>]*$/.,/[^ <Tab>]/-j<CR>Gdd

"""   ;c - Clear leading spaces and enter insertion mode
map ;c :,s/^[ <Tab>]*//g<CR>i

"""
"""
""" ###   Miscellany   #######################################################
"""

"""   ;h - Write current file out in highlighted HTML
map ;h :source $VIM/vimcurrent/syntax/2html.vim<CR>:w<CR>:close<CR>


"################################################################################
"#### AUTOCOMMANDS ##############################################################

" Wrap text in git commit message at 72 characters, as I type.
au BufNewFile,BufRead .git/COMMIT_EDITMSG     set tw=72 wrap



"################################################################################
"#### HEX MODE ##################################################################

nnoremap <C-H> :Hexmode<CR>
inoremap <C-H> <Esc>:Hexmode<CR>
vnoremap <C-H> :<C-U>Hexmode<CR>

" ex command for toggling hex mode - define mapping if desired
command -bar Hexmode call ToggleHex()

" helper function to toggle hex mode
function ToggleHex()
  " hex mode should be considered a read-only operation
  " save values for modified and read-only for restoration later,
  " and clear the read-only flag for now
  let l:modified=&mod
  let l:oldreadonly=&readonly
  let &readonly=0
  let l:oldmodifiable=&modifiable
  let &modifiable=1
  if !exists("b:editHex") || !b:editHex
    " save old options
    let b:oldft=&ft
    let b:oldbin=&bin
    " set new options
    setlocal binary " make sure it overrides any textwidth, etc.
    let &ft="xxd"
    " set status
    let b:editHex=1
    " switch to hex editor
    %!xxd -g 1
  else
    " restore old options
    let &ft=b:oldft
    if !b:oldbin
      setlocal nobinary
    endif
    " set status
    let b:editHex=0
    " return to normal editing
    %!xxd -r
  endif
  " restore values for modified and read only state
  let &mod=l:modified
  let &readonly=l:oldreadonly
  let &modifiable=l:oldmodifiable
endfunction
